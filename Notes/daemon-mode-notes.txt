The Daemon:

What does the daemon do?
--Acts as the root of the process tree for all build-framework-related processes,
from Tasks to build environment set-ups and runtime management.

The daemon isn't always needed for simple actions. Although WHILE THE DAEMON IS RUNNING,
most CLI operations will be submitted to the daemon for execution, IF THE DAEMON IS NOT RUNNING,
then for certain, simple operations the CLI will handle them itself.

This is because the CLI is the UI. Candidates for Tasks that run in the CLI are anything that does not
use the communications objects at all. That is, they do not need to talk to a running build environment
and they do not need to coordinate with other Tasks.

Keep in mind that actions that are simple in one context may not be simple in another. For example,
the same Task code could be reused across projects. If one project uses a virtual build environemnt and the
other does not (having simply prepared the host OS as the build environemnt), then only the first environment
is considered complex.  The reason is simple. In the case of needing a virtual environment, a communications channel
must be opened to reach the "sharedlib" client running inside the virtual environment.  This communications channel
is organized by the daemon.

When a Task (that is not running within the build environment) needs to talk to the build environment,
it sends a message to the daemon requesting configuration data needed to talk to the build environment.
The daemon controls how IDs are generated and issued and handles negotiating sockets and setting up Docker rules
if needbe. I expect it to be more common that a Task will need to talk to another Task running in the build
environment rather.

STOP! STOP! When does a Task for a project that uses a virtual build environment EVER need to run outside the build
environment?! Huh?!. Name a usecase. In fact, name at least 2 before you consider starting work on this communications
functionality.  Honestly? I can't think of any legit use case for this.

Hmm. In that case. Let's revist task-to-containerized-task later.
BUT, we still need to send signals from the CLI to the daemon running within the container.

So, how do we configure this?  CLI-to-daemon communication will be HTTPS-based. Why? More cross-platform,
portable, and we will have the machinery in-place to allow for remotely controlling a daemon running on a remote
environment (some 128-core VM you have on AWS, perhaps?).

TCP or UDP?  TCP.
Port: <some_unused_port>.
Where "daemon" HTTPS port set?  Hmm.

The daemon mode is mainly for IDE integration, wherein we do NOT want to lock up the UI process.
And, yes, integration with Visual Studio Code via a plugin is an integral part of this project
mainly because using the build framework becomes slightly unwieldly without such. And, it will
let us use a wizard GUI to make project set up and configuration much easier.

However, this means that we may be better off having the CLI being able to run as a daemon
with the right arguments. 

Yeah. This feels a bit ass-backward.

Let's say we give the CLI the ability to start in Daemon Mode.  How do we set up communications with it?
HTTPS is the old staple, and, we can easily add the ability to build multiple projects at once
by adding "project IDs" as requirements when using our APIs.

In that case, what if we "don't" start it in "daemon mode"? In fact, why don't we just have 2 different
binaries that import the same Python library? One for "Daemon Mode" with extra code to set up the
communications and multi-project machinery, and another for CLI operations and single-project operation.
That can work. In fact, let the CLI functionality lie entirely in an "SDK" module that has the capability
of launching the daemon binary as needed. This "daemon" is not USUALLY needed as a system service. So, there
will be no "SystemD" service config for it by default.  It CAN be used in this manner, though.  This will
allow us to have build workers.

The daemon launch parameters (what IP to bind to and what TCP port to use) will be set in a directory
under "/etc", as well as through its CLI. CLI arguments will superscede config file arguments.  Config file
format? JSON.  We're already using it for every other config file format here.

Ok we have a plan for the daemon.

This project will have 4 deliverables:
The Daemon
The CLI
The SDK Library
The Library That Holds And Runs The Actual Logic.

I need to reorganize the Git repo. Let's make what we have now the main library and make new repos for the
CLI and SDK, and for the daemon.

I will log on to GitHub after my motorcycle ride to create them.

This project needs a name.

Why not "BitChef"?  It doen't appear to be used for software projects, as far as I know,
and it encapsulates the idea of what this project does. Let's go with that.

BitChef.
We will call our build system BitChef.